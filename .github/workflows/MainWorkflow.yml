name: CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write

jobs:
  Testing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install required tools
        run: |
          dotnet tool install -g dotnet-sonarscanner
          dotnet tool install -g dotnet-reportgenerator-globaltool
          dotnet tool install -g dotnet-stryker

      - name: Sonarqube Code Analysis Start
        run: |
          dotnet sonarscanner begin \
          /k:"${{ vars.SONAR_PROJECT }}" \
          /d:sonar.host.url="${{ vars.SONARQUBE_URL }}" \
          /d:sonar.token="${{ secrets.SONAR_TOKEN }}" \
          /d:sonar.coverageReportPaths="coverage-report/SonarQube.xml" \
          /d:sonar.qualitygate.wait=true \
          /d:sonar.qualitygate.timeout=300

      - name: Build Project
        run: dotnet build

      - name: Run Unit Tests and Collect code coverage
        run: dotnet test --collect:"XPlat Code Coverage" --results-directory ./server/TestResults

      - name: Generate report
        run: |
          reportgenerator \
          -reports:./server/TestResults/**/coverage.cobertura.xml \
          -targetdir:coverage-report \
          -reporttypes:SonarQube

      - name: Complete Static Code Analysis
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
        
  MutationTesting:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - server/Application
          - server/Infrastructure.Websocket
          - server/Infrastructure.Postgres
          - server/Api.Rest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install Stryker
        run: dotnet tool install -g dotnet-stryker

      - name: Run Mutation Tests
        continue-on-error: true
        working-directory: ${{ matrix.project }}
        run: |
          dotnet stryker \
            --break-at 80 \
            --reporter html \
            --reporter progress \
            --output StrykerOutput

      - name: Normalize project name
        id: sanitize
        run: |
          SANITIZED_NAME=$(echo "${{ matrix.project }}" | sed 's/\//-/g')
          echo "name=$SANITIZED_NAME" >> $GITHUB_OUTPUT

      - name: Upload Mutation Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: stryker-report-${{ steps.sanitize.outputs.name }}
          path: ${{ matrix.project }}/StrykerOutput/**/reports/mutation-report.html
  
  delivery:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      #- name: Semantic Application Version
      #  id: semver-app
      #  uses: paulhatch/semantic-version@v5.4.0
      #  with:
      #    bump_each_commit: true

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHUB_TOKEN }}
          

      - name: Build and Push Backend Docker image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository }}-backend:production \
            -f server/Dockerfile .
          docker push ghcr.io/${{ github.repository }}-backend:production
          
          
      - name: Build and Push Frontend Docker image
        run: |
          docker build \
            --build-arg VITE_API_BASE_URL="/api" \
            --build-arg VITE_API_WS_URL="79.76.59.88:8181" \
            -t ghcr.io/${{ github.repository }}-frontend:production \
            -f client/Dockerfile .
          docker push ghcr.io/${{ github.repository }}-frontend:production
          
          
      - name: Create .env file for production
        run: |
          cat > .env <<EOL
          GITHUB_REPOSITORY=${{ github.repository }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ vars.POSTGRES_DATABASE }}
          POSTGRES_USER=${{ vars.POSTGRES_USER }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          MQTT_BROKER_HOST=${{ secrets.MQTT_BROKER_HOST }}
          MQTT_USERNAME=${{ secrets.MQTT_USERNAME }}
          MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }}
          SEQ_URL=${{ vars.SEQ_URL }}
          FEATUREHUB_API_KEY=${{ secrets.FEATURE_HUB_API_KEY }}
          FEATUREHUB_URL=${{ vars.FEATURE_HUB_URL }}
          ENVIRONMENT=Production
          BACKEND_IMAGE=${{ vars.PROD_BACKEND_IMAGE }}
          FRONTEND_IMAGE=${{ vars.PROD_FRONTEND_IMAGE }}
          EOL
          

      - name: Deploy to production server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.PROD_SERVER_IP }}
          username: ${{ vars.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          source: "./docker-compose.yml,.env,./server/Infrastructure.Postgres/Migrations/**.sql,./client/default.conf"
          target: cleanair/


      - name: Start containers on production server
        uses: appleboy/ssh-action@v1.2.1
        with:
          host: ${{ vars.PROD_SERVER_IP }}
          username: ${{ vars.PROD_SERVER_USERNAME }}
          key: ${{ secrets.PROD_SERVER_SSH_KEY }}
          script: |
            cd /home/ubuntu/cleanair
            echo "${{ secrets.GHUB_TOKEN  }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker compose pull
            docker compose down
            docker compose up -d backend frontend seq postgres